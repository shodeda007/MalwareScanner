using Scanner.Model;
using Scanner.WebAPI;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Scanner.ViewModel
{
    public class MalwareScannerViewModel
    {
        IList<ISuspeciousItem> _suspeciousItems;
        string _suspeciousFilePath;
        private FormMalwareScanner _viewFormMalwareScanner;
        private VirusTotalWebAPI _virusTotalWebAPI;
        public event EventHandler<IList<ISuspeciousItem>> SuspeciousItemsUpdate;
        public event EventHandler<string> SuspeciousFilePathUpdate;

        object objectLock = new Object();

        public MalwareScannerViewModel()
        {
            Application.SetHighDpiMode(HighDpiMode.SystemAware);
            Application.EnableVisualStyles();
            Application.SetCompatibleTextRenderingDefault(false);
        }

        public void Init(FormMalwareScanner form)
        {
            _viewFormMalwareScanner = form;
            _viewFormMalwareScanner.Init(this);
            lock(objectLock)
            {
                _viewFormMalwareScanner.SuspeciousListFilePathIsValid += OnValidSuspeciousFilePathCreated;
                _viewFormMalwareScanner.ScanButtonWasClicked += OnScanButtonWasClicked;
            }
            _virusTotalWebAPI = new VirusTotalWebAPI();
        }

        public void OnValidSuspeciousFilePathCreated(object sender, string filePath)
        {
            _suspeciousFilePath = filePath;
            _suspeciousItems = ParseSuspeciousItems();
            if (_suspeciousItems != null)
            {
                SuspeciousFilePathUpdate?.Invoke(this, _suspeciousFilePath);
                SuspeciousItemsUpdate?.Invoke(this, _suspeciousItems);
            }
        }

        private IList<ISuspeciousItem> ParseSuspeciousItems()
        {
            try
            {
                var suspeciousItemsSerializer = new SuspeciousItemsSerializer(_suspeciousFilePath);
                return suspeciousItemsSerializer.Load();
            }
            catch
            {
                MessageBox.Show($"Items serializer for CSV path: {_suspeciousFilePath} failed", "Error", MessageBoxButtons.OKCancel);
            }

            return null;
        }

        public void OnScanButtonWasClicked(object sender, EventArgs e)
        {
            Parallel.ForEach(_suspeciousItems.ToList(),item => _virusTotalWebAPI.PopulateSuspeciousItem(item));
            SuspeciousItemsUpdate?.Invoke(this, _suspeciousItems);
        }
    }
}
