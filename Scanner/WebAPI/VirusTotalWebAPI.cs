using Scanner.Model;
using System;
using System.Linq;
using VirusTotalNet;
using VirusTotalNet.Objects;
using VirusTotalNet.Results;
using Scanner.Utilities;
using System.Threading;
using System.Threading.Tasks;

namespace Scanner.WebAPI
{
    public class VirusTotalWebAPI
    {
        VirusTotal virusTotal = new VirusTotal("07fd476cd3e330780515beb8e405a317db0babe1a7d88a1b34bcf2ec57a71c63");

        static AutoResetEvent eventReset = new AutoResetEvent(false);
        public VirusTotalWebAPI()
        {
            virusTotal.UseTLS = true;
        }

        public bool PopulateSuspeciousItem(ISuspeciousItem item)
        {
            try
            {
                //_pool.WaitOne();
                if (item is DomainItem )
                {
                    PopulateDomainItem(item as DomainItem, eventReset);
                }
                if (item is HashItem)
                {
                    PopulateHashItem(item as HashItem, eventReset);
                }
                eventReset.WaitOne();
                //_pool.WaitOne();
                return true;
            }
            catch(Exception e)
            {
                throw new Exception($"PopulateSuspeciousItem failed due to the below issue:\n{e.InnerException}");
            }
        }

        private async void PopulateDomainItem(DomainItem item, AutoResetEvent eventReset)
        {
            DomainReport domainReport;
            //Thread.Sleep(30000);
            domainReport = await GetDomainReportAsyncWithRetries(item.ItemName,100);
            item.UndetectedReferrerSamples = domainReport.UndetectedReferrerSamples?.Select(x => x.ToHashItemDTOMap()).ToList();
            item.UndetectedDownloadedSamples = domainReport.UndetectedDownloadedSamples?.Select(x => x.ToHashItemDTOMap()).ToList();
            item.DetectedDownloadedSamples = domainReport.DetectedDownloadedSamples?.Select(x => x.ToHashItemDTOMap()).ToList();
            item.DetectedDownloadedSamples = domainReport.DetectedReferrerSamples?.Select(x => x.ToHashItemDTOMap()).ToList();
            item.Resolutions = domainReport.Resolutions?.Select(x => x.ToResolutionDTOMap()).ToList();
            eventReset.Set();
        }

        private async void PopulateHashItem(HashItem item, AutoResetEvent eventReset)
        {
            FileReport fileReport = null;
            fileReport = await GetFileReportAsyncWithRetries(item.ItemName,100);
            item._dateTime = fileReport.ScanDate;
            item.PositiveDetections = fileReport.Scans?.Where(x => x.Value.Detected == true).Select(x => x.ToDetectionDTOMap()).ToList();
            eventReset.Set();
        }

        private async Task<FileReport> GetFileReportAsyncWithRetries(string itemName, int sleepTime = 0, int timeAddition = 0)
        {
            FileReport fileReport = null;
            try
            {
                fileReport = await virusTotal.GetFileReportAsync(itemName);
            }
            catch
            {
                Thread.Sleep(sleepTime);
                fileReport = await GetFileReportAsyncWithRetries(itemName, sleepTime + timeAddition);
            }
            return fileReport;
        }

        private async Task<DomainReport> GetDomainReportAsyncWithRetries(string itemName, int sleepTime = 0, int timeAddition= 0)
        {
            DomainReport domainReport = null;
            try
            {
                domainReport = await virusTotal.GetDomainReportAsync(itemName);
            }
            catch
            {
                Thread.Sleep(sleepTime);
                domainReport = await GetDomainReportAsyncWithRetries(itemName, sleepTime + timeAddition);
            }
            return domainReport;
        }
    }
}
