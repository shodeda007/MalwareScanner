using Scanner.Model;
using System;
using System.Linq;
using VirusTotalNet;
using VirusTotalNet.Objects;
using VirusTotalNet.Results;
using Scanner.Utilities;
using System.Net;
using System.Threading;

namespace Scanner.WebAPI
{
    public class VirusTotalWebAPI
    {
        VirusTotal virusTotal = new VirusTotal("07fd476cd3e330780515beb8e405a317db0babe1a7d88a1b34bcf2ec57a71c63");
        

        public VirusTotalWebAPI()
        {
            virusTotal.UseTLS = true;
        }

        public bool PopulateSuspeciousItem(ISuspeciousItem item)
        {
            try
            {
                switch (item.ItemType)
                {
                    case ItemType.Domain:
                        PopulateDomainItem((DomainItem)item);
                        break;
                    case ItemType.Hash:
                        PopulateHashItem((HashItem)item);
                        break;
                }

                return true;
            }
            catch(Exception e)
            {
                throw new Exception($"PopulateSuspeciousItem failed due to the below issue:\n{e.InnerException}");
            }
        }

        private async void PopulateDomainItem(DomainItem item)
        {
            virusTotal.UseTLS = true;
            DomainReport domainReport;
            Thread.Sleep(30000);
            domainReport = await virusTotal.GetDomainReportAsync(item.ItemName);
            item.UndetectedReferrerSamples = domainReport.UndetectedReferrerSamples?.Select(x => x.ToHashItemDTOMap()).ToList();
            item.UndetectedDownloadedSamples = domainReport.UndetectedDownloadedSamples?.Select(x => x.ToHashItemDTOMap()).ToList();
            item.DetectedDownloadedSamples = domainReport.DetectedDownloadedSamples?.Select(x => x.ToHashItemDTOMap()).ToList();
            item.DetectedDownloadedSamples = domainReport.DetectedReferrerSamples?.Select(x => x.ToHashItemDTOMap()).ToList();
            item.Resolutions = domainReport.Resolutions?.Select(x => x.ToResolutionDTOMap()).ToList();
        }

        private async void PopulateHashItem(HashItem item)
        {
            virusTotal.UseTLS = true;
            FileReport fileReport;
            string _item = item.ItemName.Trim();
            fileReport = await virusTotal.GetFileReportAsync(_item);
            item._dateTime = fileReport.ScanDate;
            item.PositiveDetections = fileReport.Scans?.Where(x => x.Value.Detected == true).Select(x => x.ToDetectionDTOMap()).ToList();
        }
    }
}
