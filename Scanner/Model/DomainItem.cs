using Scanner.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VirusTotalNet.Objects;

namespace Scanner.Model
{
    public class DomainItem: ISuspeciousItem
    {
        public string _itemName;

        public IList<HashItem> UndetectedReferrerSamples { get; set; }
        public IList<HashItem> UndetectedDownloadedSamples { get; set; }
        public IList<HashItem> DetectedReferrerSamples { get; set; }
        public IList<HashItem> DetectedDownloadedSamples { get; set; }
        public IList<Resolution> Resolutions { get; set; }

        public DomainItem(string itemName )
        {
               _itemName = itemName;
            UndetectedReferrerSamples = new List<HashItem>();
            UndetectedDownloadedSamples = new List<HashItem>();
            DetectedDownloadedSamples = new List<HashItem>();
            DetectedReferrerSamples = new List<HashItem>();
            Resolutions = new List<Resolution>();
        }

        public string ItemName => _itemName;

        public string ItemDescription
        {
            get
            {
                var logBuilder = new StringBuilder();
                logBuilder.Append($"\nDomain | ");
                logBuilder.Append($"Name: {_itemName}");
                logBuilder.Append($"\nundetectedReferrerSamples:");
                foreach (var undetectedReferrerSample in UndetectedReferrerSamples)
                {
                    logBuilder.Append(undetectedReferrerSample);
                }
                logBuilder.Append($"\nundetectedDownload:");
                foreach (var undetectedDownload in UndetectedDownloadedSamples)
                {
                    logBuilder.Append(undetectedDownload);
                }
                logBuilder.Append($"\ndetectedReferrerSample:");
                foreach (var detectedReferrerSample in DetectedReferrerSamples)
                {
                    logBuilder.Append(detectedReferrerSample);
                }
                logBuilder.Append($"\ndetectedDownload:");
                foreach (var detectedDownload in DetectedDownloadedSamples)
                {
                    logBuilder.Append(detectedDownload);
                }
                return logBuilder.ToString();
            }
        }

        public IList<IItemInfo> ChildItems
        {
            get
            {
                var childItems = new List<IItemInfo>();

                if (UndetectedReferrerSamples != null) { childItems.AddRange(UndetectedReferrerSamples); };
                if (UndetectedDownloadedSamples != null) { childItems.AddRange(UndetectedDownloadedSamples); };
                if (DetectedDownloadedSamples != null) { childItems.AddRange(DetectedDownloadedSamples); };
                if (DetectedReferrerSamples != null) { childItems.AddRange(DetectedReferrerSamples); };
                if (Resolutions != null) { childItems.AddRange(Resolutions); };

                return childItems;
            }
        }
        

        public override string ToString()
        {
            return ItemDescription;
        }
    }
}
